{"version":3,"sources":["logo.svg","services/store.js","services/wallet-service.js","components/logged-in-actions/Logged-In-Actions.js","components/logged-out-actions/Logged-Out-Actions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","isAuthenticated$","BehaviorSubject","restoreAuthenticationTaskCompleted$","login","window","funwallet","sdk","openWalletAuthenticationPopUp","logout","next","web3","undefined","web3Instance","Web3","ethereum","signAMessage","messageText","a","ethereumAddress","eth","personal","sign","result","sendTransaction","tx","from","once","transactionHash","console","log","on","error","message","openKycProcess","kycModalOpen","LoggedInActions","className","onClick","this","sendSignedTransaction","signature","to","value","Component","LoggedOutActions","App","props","state","isLoggedIn","loading","subscribe","setState","forceUpdate","src","logo","alt","page","Boolean","location","hostname","match","ReactDOM","render","StrictMode","registerEventListeners","MessageListeners","authenticationCompleted","origin","restoreAuthenticationCompleted","isKycVerified","data","isVerified","showFunWalletModal","kycProcessCancelled","cancelled","hideFunWalletModal","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9114a3e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.02850c4c.svg\";","// for ease of the example i have just used subjects here, a bigger more complex app should probably use a store framework like redux\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport const isAuthenticated$ = new BehaviorSubject(false);\r\nexport const restoreAuthenticationTaskCompleted$ = new BehaviorSubject(false);\r\n","import { MessageListeners } from '@funfair-tech/wallet-sdk';\r\nimport Web3 from 'web3';\r\nimport { isAuthenticated$, restoreAuthenticationTaskCompleted$ } from './store';\r\n\r\nexport function registerEventListeners() {\r\n  window.funwallet.sdk.on(\r\n    MessageListeners.authenticationCompleted,\r\n    (result) => {\r\n      if (result.origin === 'https://wallet.funfair.io') {\r\n        isAuthenticated$.next(true);\r\n      }\r\n    }\r\n  );\r\n\r\n  window.funwallet.sdk.on(\r\n    MessageListeners.restoreAuthenticationCompleted,\r\n    (result) => {\r\n      if (result.origin === 'https://wallet.funfair.io') {\r\n        restoreAuthenticationTaskCompleted$.next(true);\r\n      }\r\n    }\r\n  );\r\n\r\n  window.funwallet.sdk.on(MessageListeners.isKycVerified, (result) => {\r\n    if (result.origin === 'https://wallet.funfair.io') {\r\n      if (!result.data.isVerified) {\r\n        window.funwallet.sdk.showFunWalletModal();\r\n      } else {\r\n        // maybe show some kind of error message as in theory\r\n        // your client should not be showing ability to popup KYC\r\n        // when they are already verified\r\n        console.error(\r\n          'Your client should not show the kyc logic if already kyced'\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  window.funwallet.sdk.on(MessageListeners.kycProcessCancelled, (result) => {\r\n    if (result.origin === 'https://wallet.funfair.io') {\r\n      if (result.data.cancelled) {\r\n        window.funwallet.sdk.hideFunWalletModal();\r\n        // you may want to move routes etc here hence why you hook onto this action\r\n        // and the sdk does not\r\n      }\r\n    }\r\n  });\r\n\r\n  // https://funfair-tech.github.io/fun-wallet-docs/guide/web-sdk/sdk-event-listeners.html#list-of-all-available-listeners\r\n  // register all the other events your interested in here...\r\n}\r\n\r\nexport function login() {\r\n  window.funwallet.sdk.openWalletAuthenticationPopUp();\r\n}\r\n\r\nexport function logout() {\r\n  window.funwallet.sdk.logout();\r\n  isAuthenticated$.next(false);\r\n}\r\n\r\nlet web3 = undefined;\r\n\r\nfunction web3Instance() {\r\n  if (web3) {\r\n    return web3;\r\n  }\r\n\r\n  return (web3 = new Web3(window.funwallet.sdk.ethereum));\r\n}\r\n\r\nexport async function signAMessage(messageText) {\r\n  const ethereumAddress = await window.funwallet.sdk.ethereumAddress();\r\n\r\n  const result = await web3Instance().eth.personal.sign(\r\n    messageText,\r\n    ethereumAddress\r\n  );\r\n\r\n  return result;\r\n}\r\n\r\nexport async function sendTransaction(tx) {\r\n  const ethereumAddress = await window.funwallet.sdk.ethereumAddress();\r\n  tx.from = ethereumAddress;\r\n\r\n  web3Instance()\r\n    .eth.sendTransaction(tx)\r\n    .once('transactionHash', (transactionHash) => {\r\n      console.log('Transaction hash test app', transactionHash);\r\n    })\r\n    .on('error', async (error) => {\r\n      console.log(error.message, error);\r\n    });\r\n}\r\n\r\nexport async function openKycProcess() {\r\n  await window.funwallet.sdk.kycModalOpen();\r\n}\r\n","import React, { Component } from 'react';\r\nimport {\r\n  logout,\r\n  openKycProcess,\r\n  sendTransaction,\r\n  signAMessage,\r\n} from '../../services/wallet-service';\r\nimport './Logged-In-Actions.css';\r\n\r\nclass LoggedInActions extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"logged-in\">\r\n        <button onClick={this.signAMessage}>Sign message</button>\r\n        <button onClick={this.sendSignedTransaction}>\r\n          Send signed transaction\r\n        </button>\r\n        <button onClick={openKycProcess}>Start KYC</button>\r\n        <button onClick={logout}>Logout</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  async signAMessage() {\r\n    const signature = await signAMessage('TESTME');\r\n    console.log('Sign message complete. sig -', signature);\r\n  }\r\n\r\n  async sendSignedTransaction() {\r\n    const signature = await sendTransaction({\r\n      to: '0x45Cd08334aeedd8a06265B2Ae302E3597d8fAA28',\r\n      value: '0x00', // 0x38d7ea4c68000 if you want to add some value 0.002 ETH\r\n    });\r\n\r\n    console.log('Send signed transaction complete. sig -', signature);\r\n  }\r\n}\r\n\r\nexport default LoggedInActions;\r\n","import React, { Component } from 'react';\r\nimport { login } from '../../services/wallet-service';\r\nimport './Logged-Out-Actions.css';\r\n\r\nclass LoggedOutActions extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"logged-out\">\r\n        <button onClick={login}>Login</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoggedOutActions;\r\n","import { WalletFollower } from '@funfair-tech/wallet-react';\nimport React, { Component } from 'react';\nimport './App.css';\nimport LoggedInActions from './components/logged-in-actions/Logged-In-Actions';\nimport LoggedOutActions from './components/logged-out-actions/Logged-Out-Actions';\nimport logo from './logo.svg';\nimport {\n  isAuthenticated$,\n  restoreAuthenticationTaskCompleted$,\n} from './services/store';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoggedIn: false, loading: true };\n  }\n\n  componentDidMount() {\n    isAuthenticated$.subscribe((value) => {\n      this.setState({\n        isLoggedIn: value,\n        loading: !restoreAuthenticationTaskCompleted$.value,\n      });\n      this.forceUpdate();\n    });\n\n    restoreAuthenticationTaskCompleted$.subscribe((value) => {\n      if (value) {\n        this.setState({ isLoggedIn: isAuthenticated$.value, loading: false });\n        this.forceUpdate();\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-container\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div className=\"action-buttons\">\n            {this.state.loading ? <p>Loading please wait</p> : null}\n            {!this.state.isLoggedIn && !this.state.loading ? (\n              <LoggedOutActions />\n            ) : null}\n            {this.state.isLoggedIn && !this.state.loading ? (\n              <LoggedInActions />\n            ) : null}\n          </div>\n          {this.state.isLoggedIn ? <WalletFollower page=\"/funds\" /> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { WalletLeader } from '@funfair-tech/wallet-react';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport { registerEventListeners } from './services/wallet-service';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WalletLeader registerEventListeners={registerEventListeners} />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}